{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { StateModel, TaskModel, User } from 'src/app/models/TaskModel';\nimport { ActionsEnum } from 'src/app/models/EnumActions';\nexport let TaskListComponent = class TaskListComponent {\n  constructor(taskService, messageService, confirmationService, stateService) {\n    this.taskService = taskService;\n    this.messageService = messageService;\n    this.confirmationService = confirmationService;\n    this.stateService = stateService;\n    this.taskList = [];\n    this.openDialog = false;\n    this.isEditTask = false;\n    this.isAdd = false;\n    this.token = \"\";\n    this.user = new User();\n    this.GetToken = user => {\n      this.taskService.getToken(user).subscribe(response => {\n        debugger;\n        if (!response) return;\n        this.token = response.token;\n        this.getTaskList(this.token);\n      });\n    };\n    this.getTaskList = token => {\n      this.taskService.getTaskList(token).subscribe(response => {\n        this.taskList = response.result || [];\n      });\n    };\n    this.getStatus = status => {\n      const first = status.substring(0, 1).toUpperCase();\n      switch (first) {\n        case \"C\":\n          return \"success\";\n          break;\n        case \"E\":\n          return \"warning\";\n          break;\n        case \"P\":\n          return \"danger\";\n          break;\n        default:\n          return \"danger\";\n          break;\n      }\n    };\n    this.addTask = () => {\n      this.openDialog = true;\n      this.isAdd = true;\n      this.isEditTask = false;\n      this.taskModel = new TaskModel();\n    };\n    this.editTask = task => {\n      this.openDialog = true;\n      this.isAdd = false;\n      this.isEditTask = true;\n      this.taskModel = task;\n    };\n    this.deleteTask = task => {\n      this.taskService.deleteTask(task, this.token).subscribe(response => {\n        if (!response) return;\n        const state = new StateModel();\n        state.key = task.id.toString();\n        state.action = ActionsEnum.DELETE;\n        state.value = task;\n        this.stateService.deleteData(state);\n        this.getTaskList(this.token);\n        this.messageService.add({\n          severity: response.isSuccessful ? 'success' : 'error',\n          summary: response.isSuccessful ? 'Completado' : 'error',\n          detail: response.isSuccessful ? `Se ha eliminado la tarea ${task.title}` : response.errorMessage,\n          life: 3001\n        });\n      });\n    };\n    this.hideDialog = event => {\n      if (event == null) return;\n      this.getTaskList(this.token);\n      this.openDialog = event.openDialog || false;\n    };\n    this.applyFilterGlobal = ($event, stringVal) => {\n      const obj = this.dt.filter($event.target.value, 'dev', stringVal);\n      return obj;\n    };\n    this.taskModel = new TaskModel();\n  }\n  ngOnInit() {\n    debugger;\n    this.GetToken(this.user);\n  }\n  deleteTaskConfirm(data) {\n    this.confirmationService.confirm({\n      message: 'Â¿Esta seguro que desea eliminar?',\n      header: 'Confirmation',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => {\n        const {\n          id\n        } = data;\n        this.deleteTask(data);\n        this.taskModel = new TaskModel();\n      }\n    });\n  }\n};\n__decorate([ViewChild('dt')], TaskListComponent.prototype, \"dt\", void 0);\nTaskListComponent = __decorate([Component({\n  selector: 'ta-app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.css']\n})], TaskListComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}